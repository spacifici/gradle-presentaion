// [*] Intro
// [*] The most important thing you need to know
//      ./gradlew -Dorg.gradle.debug=true --no-daemon --console plain :libs:tasks
// [ ] Tasks
//      [*] Basic tasks
//      [*] Working tasks
//      [ ] Debug/Release <-
// [ ] DSL
// [ ] Plugins

// As an example, we want to build a native external library using cmake and ninja
// Remind to export JAVA_HOME:
//      export JAVA_HOME="`which java | sed -r 's|(.*)((/.*?){2})$|\1|'`"

import java.nio.file.Paths

// This is specific to fbjni
final RELATIVE_SOURCE_DIR = Paths.get("extern", "fbjni")
final ABSOLUTE_SOURCE_DIR = project.rootDir.toPath().resolve(RELATIVE_SOURCE_DIR)

final buildTasks = [] // Let's collect all the build task names!

// What about Debug/Release mode? Let's loop on modes!
[ "Debug", "Release" ].each { mode ->
    final configureTaskName = "configure${mode}"
    final buildTaskName = "build${mode}"
    buildTasks << buildTaskName
    // Now the build path depends on the mode (later it may depends also on target arch)
    final RELATIVE_BUILD_DIR = Paths.get("build", "cmake", mode.toLowerCase())
    final ABSOLUTE_BUILD_DIR = project.projectDir.toPath().resolve(RELATIVE_BUILD_DIR)


    task(configureTaskName, type: Exec) {
        commandLine = [ "cmake",
                        "-G", "Ninja",
                        "-DCMAKE_BUILD_TYPE=${mode}", // Here comes the build mode
                        "-DJAVA_HOME=${System.getenv("JAVA_HOME")}", // This is specific to fbjni
                        ABSOLUTE_SOURCE_DIR.toString() ]
        workingDir = ABSOLUTE_BUILD_DIR.toString()
        group = "configure"

        doFirst {
            ABSOLUTE_BUILD_DIR.toFile().mkdirs()
        }
    }

    // build: will run ninja using the file generated by configure
    task(buildTaskName, type: Exec) {
        commandLine = ["ninja"]
        workingDir = ABSOLUTE_BUILD_DIR.toString()
        group = "build"

        dependsOn configureTaskName
    }
}

// We may want a task that build everything (see Android assemble)
task ("assemble") {
    group = "build"
    dependsOn buildTasks
}